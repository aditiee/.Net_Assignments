/*Create the following classes
Employee
   Prop	
	string Name -> no blanks
	int EmpNo -> readonly, autogenerated
	short DeptNo -> > 0
	abstract decimal Basic 
   Methods
	abstract decimal CalcNetSalary()


Manager : Employee
   Prop
	string Designation -> cant be blank
	

GeneralManager : Manager
   Prop
 	string Perks -> no validations

CEO : Employee
      Make CalNetSalary() a sealed method

NOTE : Overloaded constructors in all classes calling their base class constructor 
All classes must implement IDbFunctions interface
All classes to override the abstract members defined in the base class(Employee). Basic property to have different validation in different classes.*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Inheritance
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee e1 = new CEO("Raj", 9, 200000);
            Employee e2 = new Manager("Aditi", 3, "Manager", 10000);
            Employee e3 = new GeneralManager("Rakhi", 3, "CEO", "ABC", 90000);
           

            Console.WriteLine("Salary : " + e1.CalcNetSalary());
            Console.WriteLine("Salary : " + e2.CalcNetSalary());
            Console.WriteLine("Salary : " + e3.CalcNetSalary());

            Console.ReadLine();

        }
    }

    //EMPLOYEE CLASS
   public abstract class Employee
    {
        //string Name -> no blanks
        private string name;
        public string Name
        {
            set
            {
                if(value != null)
                {
                    name = value;
                }
                else
                {
                    Console.WriteLine("Blank Not Allowed");
                }

            }

            get
            {
                return name;
            }
        }

        //int EmpNo -> readonly, autogenerated
        private static int empnoC = 0;
        private int empno;
        public int EmpNo
        {
            get
            {
                return empno;
            }
        }


        //short DeptNo -> > 0
        private short deptno = 0;
        public short DeptNo
        {
            set
            {
                if(value > 0)
                {
                    deptno = value;
                }
                else
                {
                    Console.WriteLine("DEPARTMENT NUMBER SHOULD BE GREATER THAN 0");
                }
            }

            get
            {
                return deptno;
            }
        }
        //abstract decimal Basic
        protected decimal basic;
        public abstract decimal Basic
        {
            set;
            get;
        }

        public abstract decimal CalcNetSalary();

        //Constructor


        public Employee(string Name =null, short DeptNo = 1, decimal Basic = 0)
        {
            empno = ++empnoC;
            this.Name = Name;
            this.DeptNo = DeptNo;
            this.Basic = Basic;
           //Console.WriteLine("Name : " +Name+ " DeptNo : " +DeptNo+ " Basic : " + Basic);
        }


    }

    //MANAGER CLASS
    public class Manager : Employee
    {
        //string Designation -> cant be blank
        private string designation;
        public string Designation
        {
            set
            {
                if (value != null)
                {
                    designation = value;
                }
                else
                {
                    Console.WriteLine("Blank not allowed");
                }
            }
        }

        public override decimal Basic
        {
            set
            {
                basic = value;
            }
            get
            {
                return basic;
            }

        }

        public override decimal CalcNetSalary()
        {
            decimal Salary;
            Salary = Basic + (Basic * 10);
            return Salary;
        }
        public Manager(string Name, short DeptNo, string Designation, decimal Basic = 0) : base(Name, DeptNo)
        {

            this.Basic = Basic;
            this.Designation = Designation;
            Console.WriteLine("Name : " + Name + " DeptNo :  " + DeptNo + " Designation : " + Designation + " Basic : " + Basic  );

        }

    }
    //GENERALMANAGER CLASS
    public class GeneralManager : Manager
    {
        //string Perks -> no validations

        private string perks;
        public string Perks
        {
            set
            {
                perks = value;
            }
            get
            {
                return perks;
            }
        }
        public GeneralManager(string Name, short DeptNo, string Designation, string Perks, decimal Basic) : base(Name, DeptNo, Designation)
        {
            this.Basic = Basic;
            this.Perks = Perks;
        }



    }

    //CEO CLASS
    public class CEO : Employee
    {
        public override decimal Basic { get; set; }

        public override sealed decimal CalcNetSalary()
        {
            decimal Salary;
            Salary = Basic + (Basic * 10);
            return Salary;

        }
        public CEO(string Name, short DeptNo, decimal Basic) : base(Name, DeptNo)
        {
            this.Basic = Basic;
        }

    }

}
